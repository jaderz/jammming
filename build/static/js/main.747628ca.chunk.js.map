{"version":3,"sources":["util/Spotify.js","components/SearchBar/SearchBar.js","components/Track/Track.js","components/TrackList/TrackList.js","components/SearchResults/SearchResults.js","components/Playlist/Playlist.js","components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","SearchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","term","search","bind","assertThisInitialized","handleTermChange","onSearch","event","setState","target","value","react_default","a","createElement","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","onAdd","track","onRemove","isRemoval","name","artist","album","renderAction","TrackList","tracks","map","components_Track_Track","key","id","SearchResults","components_TrackList_TrackList","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistName","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","concat","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","userID","method","body","JSON","stringify","playlistID","uris","App","updatePlaylistName","find","savedTrack","songList","push","filter","saveTracks","_this2","_this3","components_SearchBar_SearchBar","components_SearchResults_SearchResults","components_Playlist_Playlist","Boolean","hostname","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8QAGIA,oFC8BWC,2BA7Bb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,KAAM,IAGRR,EAAKS,OAAST,EAAKS,OAAOC,KAAZT,OAAAU,EAAA,EAAAV,CAAAD,IACdA,EAAKY,iBAAmBZ,EAAKY,iBAAiBF,KAAtBT,OAAAU,EAAA,EAAAV,CAAAD,IARPA,wEAYjBG,KAAKJ,MAAMc,SAASV,KAAKI,MAAMC,+CAGhBM,GACfX,KAAKY,SAAS,CAAEP,KAAMM,EAAME,OAAOC,yCAInC,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,SAAOE,YAAY,iCAAiCC,SAAUpB,KAAKS,mBACnEM,EAAAC,EAAAC,cAAA,KAAGI,QAASrB,KAAKM,QAAjB,kBAxBgBgB,IAAMC,YCoCfC,iCAnCb,SAAAA,EAAY5B,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAwB,IACjB3B,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA0B,GAAArB,KAAAH,KAAMJ,KAED6B,SAAW5B,EAAK4B,SAASlB,KAAdT,OAAAU,EAAA,EAAAV,CAAAD,IAChBA,EAAK6B,YAAc7B,EAAK6B,YAAYnB,KAAjBT,OAAAU,EAAA,EAAAV,CAAAD,IAJFA,wEAOVc,GACPX,KAAKJ,MAAM+B,MAAM3B,KAAKJ,MAAMgC,2CAGlBjB,GACVX,KAAKJ,MAAMiC,SAAS7B,KAAKJ,MAAMgC,8CAI/B,OAAI5B,KAAKJ,MAAMkC,UACNf,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeG,QAASrB,KAAK0B,aAA1C,KAEFX,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeG,QAASrB,KAAKyB,UAA1C,sCAIP,OACEV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,UAAKjB,KAAKJ,MAAMgC,MAAMG,MACtBhB,EAAAC,EAAAC,cAAA,SAAIjB,KAAKJ,MAAMgC,MAAMI,OAArB,OAAiChC,KAAKJ,MAAMgC,MAAMK,QAEnDjC,KAAKkC,uBA9BMZ,IAAMC,YCoBXY,mLAlBJ,IAAAtC,EAAAG,KACP,OACEe,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAEXlB,KAAKJ,MAAMwC,OAAOC,IAAI,SAAAT,GACpB,OAAOb,EAAAC,EAAAC,cAACqB,EAAD,CACEV,MAAOA,EACPW,IAAKX,EAAMY,GACXb,MAAO9B,EAAKD,MAAM+B,MAClBE,SAAUhC,EAAKD,MAAMiC,SACrBC,UAAWjC,EAAKD,MAAMkC,sBAXnBR,IAAMC,WCafkB,mLAXX,OACE1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAACyB,EAAD,CACEN,OAAQpC,KAAKJ,MAAM+C,cACnBhB,MAAO3B,KAAKJ,MAAM+B,gBAPAL,IAAMC,WCwBnBqB,qBAvBb,SAAAA,EAAYhD,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA4C,IACjB/C,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA8C,GAAAzC,KAAAH,KAAMJ,KACDiD,iBAAmBhD,EAAKgD,iBAAiBtC,KAAtBT,OAAAU,EAAA,EAAAV,CAAAD,IAFPA,gFAKFc,GACfX,KAAKJ,MAAMkD,aAAanC,EAAME,OAAOC,wCAIrC,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,SAAO8B,aAAc/C,KAAKJ,MAAMoD,aAAc5B,SAAUpB,KAAK6C,mBAC7D9B,EAAAC,EAAAC,cAACyB,EAAD,CACEN,OAAQpC,KAAKJ,MAAMqD,eACnBpB,SAAU7B,KAAKJ,MAAMiC,SACrBC,WAAW,IACbf,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAgBG,QAASrB,KAAKJ,MAAMsD,QAAjD,2BAlBe5B,IAAMC,YLCvB4B,EAAU,CACdC,eADc,WAEZ,GAAI1D,EACF,OAAOA,EAGT,IAAM2D,EAAmBC,OAAOC,SAASC,KAAKC,MAAM,wBAC9CC,EAAiBJ,OAAOC,SAASC,KAAKC,MAAM,sBAClD,GAAIJ,GAAoBK,EAAgB,CACtChE,EAAc2D,EAAiB,GAC/B,IAAMM,EAAYC,OAAOF,EAAe,IAGxC,OAFAJ,OAAOO,WAAW,kBAAMnE,EAAc,IAAgB,IAAZiE,GAC1CL,OAAOQ,QAAQC,UAAU,eAAgB,KAAM,KACxCrE,EAEP,IAAMsE,EAAS,oDAAAC,OApBJ,mCAoBI,mEAAAA,OAnBD,qCAoBdX,OAAOC,SAAWS,GAItB1D,OApBc,SAoBPD,GACL,IAAMX,EAAcyD,EAAQC,iBAC5B,OAAOc,MAAK,kDAAAD,OAAmD5D,GAC7D,CACE8D,QAAS,CAACC,cAAa,UAAAH,OAAYvE,MAEnC2E,KAAK,SAAAC,GACP,OAAOA,EAASC,SACfF,KAAK,SAAAG,GACN,OAAKA,EAAapC,OAGXoC,EAAapC,OAAOqC,MAAMpC,IAAI,SAAAT,GAAK,MAAK,CAC7CY,GAAIZ,EAAMY,GACVT,KAAMH,EAAMG,KACZC,OAAQJ,EAAM8C,QAAQ,GAAG3C,KACzBE,MAAOL,EAAMK,MAAMF,KACnB4C,IAAK/C,EAAM+C,OAPJ,MAYbC,aA1Cc,SA0CD5B,EAAc6B,GACzB,GAAG7B,GAAgB6B,EAAW,CAC5B,IAEIC,EAFEpF,EAAcyD,EAAQC,iBACtBe,EAAU,CAACC,cAAa,UAAAH,OAAYvE,IAG1C,OAAOwE,MAAM,gCAAiC,CAC5CC,QAASA,IACRE,KAAK,SAAAC,GACN,OAAOA,EAASC,SACfF,KAAK,SAAAG,GAGN,OAFAM,EAASN,EAAahC,GAEf0B,MAAK,oCAAAD,OAAqCa,EAArC,cAAyD,CACnEC,OAAQ,OACRZ,QAASA,EACTa,KAAMC,KAAKC,UAAU,CAACnD,KAAMiB,MAC3BqB,KAAK,SAAAC,GACN,OAAOA,EAASC,SACfF,KAAK,SAAAG,GACN,IAAMW,EAAaX,EAAahC,GAEhC,OAAO0B,MAAK,oCAAAD,OAAqCa,EAArC,eAAAb,OAAyDkB,EAAzD,WAA8E,CACxFJ,OAAQ,OACRZ,QAASA,EACTa,KAAMC,KAAKC,UAAU,CAACE,KAAMP,aAUzB1B,IMGAkC,cA7Eb,SAAAA,EAAYzF,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAqF,IAChBxF,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAuF,GAAAlF,KAAAH,KAAMJ,KACDQ,MAAQ,CACXuC,cAAe,GACfK,aAAc,eACdC,eAAgB,IAGlBpD,EAAK4B,SAAW5B,EAAK4B,SAASlB,KAAdT,OAAAU,EAAA,EAAAV,CAAAD,IAChBA,EAAK6B,YAAc7B,EAAK6B,YAAYnB,KAAjBT,OAAAU,EAAA,EAAAV,CAAAD,IACnBA,EAAKyF,mBAAqBzF,EAAKyF,mBAAmB/E,KAAxBT,OAAAU,EAAA,EAAAV,CAAAD,IAC1BA,EAAK+E,aAAe/E,EAAK+E,aAAarE,KAAlBT,OAAAU,EAAA,EAAAV,CAAAD,IACpBA,EAAKS,OAAST,EAAKS,OAAOC,KAAZT,OAAAU,EAAA,EAAAV,CAAAD,IAZEA,wEAgBT+B,GACP,IAAG5B,KAAKI,MAAM6C,eAAesC,KAAK,SAAAC,GAAU,OAAIA,EAAWhD,KAAOZ,EAAMY,KAAxE,CAGA,IAAMiD,EAAWzF,KAAKI,MAAM6C,eAC5BwC,EAASC,KAAK9D,GACd5B,KAAKY,SAAS,CAAEqC,eAAgBwC,yCAMtB7D,GACV,IAAM6D,EAAWzF,KAAKI,MAAM6C,eAAe0C,OAAO,SAAAC,GAAU,OAAIA,EAAWpD,KAAOZ,EAAMY,KACxFxC,KAAKY,SAAS,CAAEqC,eAAgBwC,+CAGf1D,GACjB/B,KAAKY,SAAS,CAAEoC,aAAcjB,2CAGjB,IAAA8D,EAAA7F,KACP6E,EAAY7E,KAAKI,MAAM6C,eAAeZ,IAAI,SAAAT,GAAK,OAAIA,EAAM+C,MAC/DxB,EAAQyB,aAAa5E,KAAKI,MAAM4C,aAAc6B,GAAWR,KAAK,WAC5DwB,EAAKjF,SAAS,CACZoC,aAAc,eACdC,eAAgB,sCAKf5C,GAAM,IAAAyF,EAAA9F,KACXmD,EAAQ7C,OAAOD,GAAMgE,KAAK,SAAA1B,GACxBmD,EAAKlF,SAAS,CAAC+B,cAAeA,uCAKhC,OACE5B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,eAAMF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aAAhB,OAAN,OACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC8E,EAAD,CACErF,SAAUV,KAAKM,SACjBS,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAC+E,EAAD,CACErD,cAAe3C,KAAKI,MAAMuC,cAC1BhB,MAAO3B,KAAKyB,WACdV,EAAAC,EAAAC,cAACgF,EAAD,CACEjD,aAAchD,KAAKI,MAAM4C,aACzBF,aAAc9C,KAAKsF,mBACnBrC,eAAgBjD,KAAKI,MAAM6C,eAC3BpB,SAAU7B,KAAK0B,YACfwB,OAAQlD,KAAK4E,yBAtETtD,IAAMC,WCKJ2E,QACW,cAA7B5C,OAAOC,SAAS4C,UAEe,UAA7B7C,OAAOC,SAAS4C,UAEhB7C,OAAOC,SAAS4C,SAAS1C,MACvB,2DCZN2C,IAASC,OAAOtF,EAAAC,EAAAC,cAACqF,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,KAAK,SAAAuC,GACjCA,EAAaC","file":"static/js/main.747628ca.chunk.js","sourcesContent":["const clientID = '9e00049c75ea44ffb342bdc6edb79a1d';\r\nconst redirectURI = 'http://alana-is-jammming.surge.sh';\r\n\r\nlet accessToken;\r\n\r\nconst Spotify = {\r\n  getAccessToken() {\r\n    if (accessToken) {\r\n      return accessToken;\r\n    }\r\n\r\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n    if (accessTokenMatch && expiresInMatch) {\r\n      accessToken = accessTokenMatch[1];\r\n      const expiresIn = Number(expiresInMatch[1]);\r\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n      window.history.pushState('Access Token', null, '/');\r\n      return accessToken;\r\n    } else {\r\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\r\n      window.location = accessUrl;\r\n    }\r\n  },\r\n\r\n  search(term) {\r\n    const accessToken = Spotify.getAccessToken();\r\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`,\r\n      {\r\n        headers: {Authorization: `Bearer ${accessToken}`}\r\n      }\r\n      ).then(response => {\r\n      return response.json();\r\n    }).then(jsonResponse => {\r\n      if (!jsonResponse.tracks) {\r\n        return [];\r\n      }\r\n      return jsonResponse.tracks.items.map(track => ({\r\n        id: track.id,\r\n        name: track.name,\r\n        artist: track.artists[0].name,\r\n        album: track.album.name,\r\n        uri: track.uri\r\n      }));\r\n    });\r\n  },\r\n\r\n  savePlaylist(playlistName, trackUris) {\r\n    if(playlistName && trackUris) {\r\n      const accessToken = Spotify.getAccessToken();\r\n      const headers = {Authorization: `Bearer ${accessToken}`}\r\n      let userID;\r\n\r\n      return fetch('https://api.spotify.com/v1/me', {\r\n        headers: headers\r\n      }).then(response => {\r\n        return response.json();\r\n      }).then(jsonResponse => {\r\n        userID = jsonResponse.id;\r\n\r\n        return fetch(`https://api.spotify.com/v1/users/${userID}/playlists`, {\r\n          method: 'POST',\r\n          headers: headers,\r\n          body: JSON.stringify({name: playlistName})\r\n        }).then(response => {\r\n          return response.json();\r\n        }).then(jsonResponse => {\r\n          const playlistID = jsonResponse.id;\r\n\r\n          return fetch(`https://api.spotify.com/v1/users/${userID}/playlists/${playlistID}/tracks`, {\r\n            method: 'POST',\r\n            headers: headers,\r\n            body: JSON.stringify({uris: trackUris})\r\n          })\r\n        })\r\n      });\r\n    }\r\n    return;\r\n  }\r\n\r\n}\r\n\r\nexport default Spotify;\r\n","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nclass SearchBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      term: ''\r\n    };\r\n\r\n    this.search = this.search.bind(this);\r\n    this.handleTermChange = this.handleTermChange.bind(this);\r\n  }\r\n\r\n  search() {\r\n    this.props.onSearch(this.state.term);\r\n  }\r\n\r\n  handleTermChange(event) {\r\n    this.setState({ term: event.target.value })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"SearchBar\">\r\n        <input placeholder=\"Enter A Song, Album, or Artist\" onChange={this.handleTermChange} />\r\n        <a onClick={this.search}>SEARCH</a>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;\r\n","import React from 'react';\r\nimport './Track.css';\r\n\r\nclass Track extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.addTrack = this.addTrack.bind(this);\r\n    this.removeTrack = this.removeTrack.bind(this);\r\n  }\r\n\r\n  addTrack(event) {\r\n    this.props.onAdd(this.props.track);\r\n  }\r\n\r\n  removeTrack(event) {\r\n    this.props.onRemove(this.props.track);\r\n  }\r\n\r\n  renderAction() {\r\n    if (this.props.isRemoval) {\r\n      return <a className=\"Track-action\" onClick={this.removeTrack}>-</a>;\r\n    }\r\n    return <a className=\"Track-action\" onClick={this.addTrack}>+</a>;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Track\">\r\n        <div className=\"Track-information\">\r\n          <h3>{this.props.track.name}</h3>\r\n          <p>{this.props.track.artist} |  {this.props.track.album}</p>\r\n        </div>\r\n        {this.renderAction()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Track;\r\n","import React from 'react';\r\nimport './TrackList.css';\r\nimport Track from '../Track/Track';\r\n\r\nclass TrackList extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"TrackList\">\r\n        {\r\n          this.props.tracks.map(track => {\r\n            return <Track\r\n                     track={track}\r\n                     key={track.id}\r\n                     onAdd={this.props.onAdd}\r\n                     onRemove={this.props.onRemove}\r\n                     isRemoval={this.props.isRemoval} />\r\n          })\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TrackList;\r\n","import React from 'react';\r\nimport './SearchResults.css';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\nclass SearchResults extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"SearchResults\">\r\n        <h2>Results</h2>\r\n        <TrackList\r\n          tracks={this.props.searchResults}\r\n          onAdd={this.props.onAdd} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchResults;\r\n","import React from 'react';\r\nimport './Playlist.css';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\nclass Playlist extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleNameChange = this.handleNameChange.bind(this);\r\n  }\r\n\r\n  handleNameChange(event) {\r\n    this.props.onNameChange(event.target.value);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Playlist\">\r\n        <input defaultValue={this.props.playlistName} onChange={this.handleNameChange} />\r\n        <TrackList\r\n          tracks={this.props.playlistTracks}\r\n          onRemove={this.props.onRemove}\r\n          isRemoval={true} />\r\n        <a className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</a>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Playlist;\r\n","import React from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      searchResults: [],\n      playlistName: 'New Playlist',\n      playlistTracks: []\n    };\n\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  //if the new track.id does not exist in playlistTrack array then push it into the array and update the state of the array\n  addTrack(track) {\n    if(this.state.playlistTracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    }\n    const songList = this.state.playlistTracks;\n    songList.push(track);\n    this.setState({ playlistTracks: songList });\n  }\n\n  //gather all items in the playlistTracks array using filter() that are not equal to the track you want to remove...\n  //filter() updates the playlistTracks array with only those items to keep\n  //then setState with the variable assigned to the updated array, this updates the array excluding the removed track\n  removeTrack(track) {\n    const songList = this.state.playlistTracks.filter(saveTracks => saveTracks.id !== track.id)\n    this.setState({ playlistTracks: songList })\n  }\n\n  updatePlaylistName(name) {\n    this.setState({ playlistName: name });\n  }\n\n  savePlaylist() {\n    const trackUris = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks: []\n      });\n    });\n  }\n\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({searchResults: searchResults});\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar\n            onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults\n              searchResults={this.state.searchResults}\n              onAdd={this.addTrack} />\n            <Playlist\n              playlistName={this.state.playlistName}\n              onNameChange={this.updatePlaylistName}\n              playlistTracks={this.state.playlistTracks}\n              onRemove={this.removeTrack}\n              onSave={this.savePlaylist} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}